scalar Time

directive @validate(constraint: String!) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

type Plane {
  plane_id: String!
  plane_number: String!
  total_seats: Int!
  status: String!
}

type PlaneId {
  id: String!
}

type PlaneList {
  planes: [Plane!]!
}

input PlaneQuery {
  plane_id: String
  plane_number: String @validate(constraint: "min=3,max=30")
  total_seats_from: Int @validate(constraint: "min=30,max=400")
  total_seats_to: Int @validate(constraint: "min=30,max=400")
  status: [String]
}

input PlaneInput {
  plane_id: String
  plane_number: String! @validate(constraint: "min=3,max=30")
  total_seats: Int! @validate(constraint: "min=30,max=400")
  status: String! @validate(constraint: "oneof='flying' 'cleaning' 'repairing' 'ready' 'deleted'")
}

input PlaneIdInput {
  id: String! @validate(constraint: "uuid")
}

input PlaneStatusInput {
  plane_id: String! @validate(constraint: "uuid")
  status: String! @validate(constraint: "oneof='flying' 'cleaning' 'repairing' 'ready' 'deleted'")
}

type Flight {
  id: String!
  plane_number: String!
  departure_point: String!
  destination_point: String!
  scheduled_departure_time: Time!
  estimated_arrival_time: Time
  real_departure_time: Time
  real_arrival_time: Time
  status: String!
  available_seats: Int!
}

type FlightId {
  id: String!
}

type FlightList {
  flights: [Flight!]!
}

input FlightQuery {
  id: String
  plane_number: String @validate(constraint: "min=3,max=30")
  departure_point: String
  destination_point: String
  scheduled_departure_time_from: Time
  scheduled_departure_time_to: Time
  status: [String]
  available_seats_from: Int
  available_seats_to: Int
}

input FlightInput {
  id: String
  plane_number: String! @validate(constraint: "min=3,max=30")
  departure_point: String!
  destination_point: String!
  scheduled_departure_time: Time!
}

input FlightIdInput {
  id: String! @validate(constraint: "uuid")
}

input FlightStatusInput {
  flight_id: String! @validate(constraint: "uuid")
  status: String! @validate(constraint: "oneof='scheduled' 'canceled' 'flying' 'finished'")
}

input BookFlightInput {
  flight_id: String! @validate(constraint: "uuid")
  number_of_seats: Int! @validate(constraint: "min=1,max=10")
}

type Query {
  getPlanesList(plane: PlaneQuery): PlaneList!
  getPlaneById(id: String!): Plane!
  getFlightsList(flight: FlightQuery): FlightList!
  getFlightById(id: String!): Flight!
}

type Mutation {
  upsertPlane(plane: PlaneInput!): PlaneId!
  changePlaneStatus(input: PlaneStatusInput!): Boolean!
  upsertFlight(flight: FlightInput!): FlightId!
  changeFlightStatus(input: FlightStatusInput!): Boolean!
  bookFlight(input: BookFlightInput!): Boolean!
}
