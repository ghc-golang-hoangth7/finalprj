// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Plane is an object representing the database table.
type Plane struct {
	PlaneID     string `boil:"plane_id" json:"plane_id" toml:"plane_id" yaml:"plane_id"`
	PlaneNumber string `boil:"plane_number" json:"plane_number" toml:"plane_number" yaml:"plane_number"`
	TotalSeats  int    `boil:"total_seats" json:"total_seats" toml:"total_seats" yaml:"total_seats"`
	Status      string `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *planeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L planeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlaneColumns = struct {
	PlaneID     string
	PlaneNumber string
	TotalSeats  string
	Status      string
}{
	PlaneID:     "plane_id",
	PlaneNumber: "plane_number",
	TotalSeats:  "total_seats",
	Status:      "status",
}

var PlaneTableColumns = struct {
	PlaneID     string
	PlaneNumber string
	TotalSeats  string
	Status      string
}{
	PlaneID:     "planes.plane_id",
	PlaneNumber: "planes.plane_number",
	TotalSeats:  "planes.total_seats",
	Status:      "planes.status",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PlaneWhere = struct {
	PlaneID     whereHelperstring
	PlaneNumber whereHelperstring
	TotalSeats  whereHelperint
	Status      whereHelperstring
}{
	PlaneID:     whereHelperstring{field: "\"planes\".\"plane_id\""},
	PlaneNumber: whereHelperstring{field: "\"planes\".\"plane_number\""},
	TotalSeats:  whereHelperint{field: "\"planes\".\"total_seats\""},
	Status:      whereHelperstring{field: "\"planes\".\"status\""},
}

// PlaneRels is where relationship names are stored.
var PlaneRels = struct {
	PlaneNumberFlights string
}{
	PlaneNumberFlights: "PlaneNumberFlights",
}

// planeR is where relationships are stored.
type planeR struct {
	PlaneNumberFlights FlightSlice `boil:"PlaneNumberFlights" json:"PlaneNumberFlights" toml:"PlaneNumberFlights" yaml:"PlaneNumberFlights"`
}

// NewStruct creates a new relationship struct
func (*planeR) NewStruct() *planeR {
	return &planeR{}
}

func (r *planeR) GetPlaneNumberFlights() FlightSlice {
	if r == nil {
		return nil
	}
	return r.PlaneNumberFlights
}

// planeL is where Load methods for each relationship are stored.
type planeL struct{}

var (
	planeAllColumns            = []string{"plane_id", "plane_number", "total_seats", "status"}
	planeColumnsWithoutDefault = []string{"plane_id", "plane_number", "total_seats", "status"}
	planeColumnsWithDefault    = []string{}
	planePrimaryKeyColumns     = []string{"plane_id"}
	planeGeneratedColumns      = []string{}
)

type (
	// PlaneSlice is an alias for a slice of pointers to Plane.
	// This should almost always be used instead of []Plane.
	PlaneSlice []*Plane
	// PlaneHook is the signature for custom Plane hook methods
	PlaneHook func(context.Context, boil.ContextExecutor, *Plane) error

	planeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	planeType                 = reflect.TypeOf(&Plane{})
	planeMapping              = queries.MakeStructMapping(planeType)
	planePrimaryKeyMapping, _ = queries.BindMapping(planeType, planeMapping, planePrimaryKeyColumns)
	planeInsertCacheMut       sync.RWMutex
	planeInsertCache          = make(map[string]insertCache)
	planeUpdateCacheMut       sync.RWMutex
	planeUpdateCache          = make(map[string]updateCache)
	planeUpsertCacheMut       sync.RWMutex
	planeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var planeAfterSelectHooks []PlaneHook

var planeBeforeInsertHooks []PlaneHook
var planeAfterInsertHooks []PlaneHook

var planeBeforeUpdateHooks []PlaneHook
var planeAfterUpdateHooks []PlaneHook

var planeBeforeDeleteHooks []PlaneHook
var planeAfterDeleteHooks []PlaneHook

var planeBeforeUpsertHooks []PlaneHook
var planeAfterUpsertHooks []PlaneHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Plane) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Plane) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Plane) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Plane) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Plane) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Plane) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Plane) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Plane) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Plane) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlaneHook registers your hook function for all future operations.
func AddPlaneHook(hookPoint boil.HookPoint, planeHook PlaneHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		planeAfterSelectHooks = append(planeAfterSelectHooks, planeHook)
	case boil.BeforeInsertHook:
		planeBeforeInsertHooks = append(planeBeforeInsertHooks, planeHook)
	case boil.AfterInsertHook:
		planeAfterInsertHooks = append(planeAfterInsertHooks, planeHook)
	case boil.BeforeUpdateHook:
		planeBeforeUpdateHooks = append(planeBeforeUpdateHooks, planeHook)
	case boil.AfterUpdateHook:
		planeAfterUpdateHooks = append(planeAfterUpdateHooks, planeHook)
	case boil.BeforeDeleteHook:
		planeBeforeDeleteHooks = append(planeBeforeDeleteHooks, planeHook)
	case boil.AfterDeleteHook:
		planeAfterDeleteHooks = append(planeAfterDeleteHooks, planeHook)
	case boil.BeforeUpsertHook:
		planeBeforeUpsertHooks = append(planeBeforeUpsertHooks, planeHook)
	case boil.AfterUpsertHook:
		planeAfterUpsertHooks = append(planeAfterUpsertHooks, planeHook)
	}
}

// One returns a single plane record from the query.
func (q planeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Plane, error) {
	o := &Plane{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for planes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Plane records from the query.
func (q planeQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlaneSlice, error) {
	var o []*Plane

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Plane slice")
	}

	if len(planeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Plane records in the query.
func (q planeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count planes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q planeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if planes exists")
	}

	return count > 0, nil
}

// PlaneNumberFlights retrieves all the flight's Flights with an executor via plane_number column.
func (o *Plane) PlaneNumberFlights(mods ...qm.QueryMod) flightQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"flights\".\"plane_number\"=?", o.PlaneNumber),
	)

	return Flights(queryMods...)
}

// LoadPlaneNumberFlights allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (planeL) LoadPlaneNumberFlights(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlane interface{}, mods queries.Applicator) error {
	var slice []*Plane
	var object *Plane

	if singular {
		var ok bool
		object, ok = maybePlane.(*Plane)
		if !ok {
			object = new(Plane)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlane)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlane))
			}
		}
	} else {
		s, ok := maybePlane.(*[]*Plane)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlane)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlane))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &planeR{}
		}
		args = append(args, object.PlaneNumber)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PlaneNumber) {
					continue Outer
				}
			}

			args = append(args, obj.PlaneNumber)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`flights`),
		qm.WhereIn(`flights.plane_number in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load flights")
	}

	var resultSlice []*Flight
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice flights")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on flights")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for flights")
	}

	if len(flightAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlaneNumberFlights = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &flightR{}
			}
			foreign.R.PlaneNumberPlane = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.PlaneNumber, foreign.PlaneNumber) {
				local.R.PlaneNumberFlights = append(local.R.PlaneNumberFlights, foreign)
				if foreign.R == nil {
					foreign.R = &flightR{}
				}
				foreign.R.PlaneNumberPlane = local
				break
			}
		}
	}

	return nil
}

// AddPlaneNumberFlights adds the given related objects to the existing relationships
// of the plane, optionally inserting them as new records.
// Appends related to o.R.PlaneNumberFlights.
// Sets related.R.PlaneNumberPlane appropriately.
func (o *Plane) AddPlaneNumberFlights(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Flight) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PlaneNumber, o.PlaneNumber)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"flights\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"plane_number"}),
				strmangle.WhereClause("\"", "\"", 2, flightPrimaryKeyColumns),
			)
			values := []interface{}{o.PlaneNumber, rel.FlightID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PlaneNumber, o.PlaneNumber)
		}
	}

	if o.R == nil {
		o.R = &planeR{
			PlaneNumberFlights: related,
		}
	} else {
		o.R.PlaneNumberFlights = append(o.R.PlaneNumberFlights, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &flightR{
				PlaneNumberPlane: o,
			}
		} else {
			rel.R.PlaneNumberPlane = o
		}
	}
	return nil
}

// SetPlaneNumberFlights removes all previously related items of the
// plane replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PlaneNumberPlane's PlaneNumberFlights accordingly.
// Replaces o.R.PlaneNumberFlights with related.
// Sets related.R.PlaneNumberPlane's PlaneNumberFlights accordingly.
func (o *Plane) SetPlaneNumberFlights(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Flight) error {
	query := "update \"flights\" set \"plane_number\" = null where \"plane_number\" = $1"
	values := []interface{}{o.PlaneNumber}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PlaneNumberFlights {
			queries.SetScanner(&rel.PlaneNumber, nil)
			if rel.R == nil {
				continue
			}

			rel.R.PlaneNumberPlane = nil
		}
		o.R.PlaneNumberFlights = nil
	}

	return o.AddPlaneNumberFlights(ctx, exec, insert, related...)
}

// RemovePlaneNumberFlights relationships from objects passed in.
// Removes related items from R.PlaneNumberFlights (uses pointer comparison, removal does not keep order)
// Sets related.R.PlaneNumberPlane.
func (o *Plane) RemovePlaneNumberFlights(ctx context.Context, exec boil.ContextExecutor, related ...*Flight) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PlaneNumber, nil)
		if rel.R != nil {
			rel.R.PlaneNumberPlane = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("plane_number")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PlaneNumberFlights {
			if rel != ri {
				continue
			}

			ln := len(o.R.PlaneNumberFlights)
			if ln > 1 && i < ln-1 {
				o.R.PlaneNumberFlights[i] = o.R.PlaneNumberFlights[ln-1]
			}
			o.R.PlaneNumberFlights = o.R.PlaneNumberFlights[:ln-1]
			break
		}
	}

	return nil
}

// Planes retrieves all the records using an executor.
func Planes(mods ...qm.QueryMod) planeQuery {
	mods = append(mods, qm.From("\"planes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"planes\".*"})
	}

	return planeQuery{q}
}

// FindPlane retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlane(ctx context.Context, exec boil.ContextExecutor, planeID string, selectCols ...string) (*Plane, error) {
	planeObj := &Plane{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"planes\" where \"plane_id\"=$1", sel,
	)

	q := queries.Raw(query, planeID)

	err := q.Bind(ctx, exec, planeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from planes")
	}

	if err = planeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return planeObj, err
	}

	return planeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Plane) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no planes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	planeInsertCacheMut.RLock()
	cache, cached := planeInsertCache[key]
	planeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			planeAllColumns,
			planeColumnsWithDefault,
			planeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(planeType, planeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(planeType, planeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"planes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"planes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into planes")
	}

	if !cached {
		planeInsertCacheMut.Lock()
		planeInsertCache[key] = cache
		planeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Plane.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Plane) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	planeUpdateCacheMut.RLock()
	cache, cached := planeUpdateCache[key]
	planeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			planeAllColumns,
			planePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update planes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"planes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, planePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(planeType, planeMapping, append(wl, planePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update planes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for planes")
	}

	if !cached {
		planeUpdateCacheMut.Lock()
		planeUpdateCache[key] = cache
		planeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q planeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for planes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for planes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlaneSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"planes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, planePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in plane slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all plane")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Plane) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no planes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	planeUpsertCacheMut.RLock()
	cache, cached := planeUpsertCache[key]
	planeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			planeAllColumns,
			planeColumnsWithDefault,
			planeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			planeAllColumns,
			planePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert planes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(planePrimaryKeyColumns))
			copy(conflict, planePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"planes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(planeType, planeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(planeType, planeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert planes")
	}

	if !cached {
		planeUpsertCacheMut.Lock()
		planeUpsertCache[key] = cache
		planeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Plane record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Plane) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Plane provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), planePrimaryKeyMapping)
	sql := "DELETE FROM \"planes\" WHERE \"plane_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from planes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for planes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q planeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no planeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from planes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for planes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlaneSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(planeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"planes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, planePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from plane slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for planes")
	}

	if len(planeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Plane) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlane(ctx, exec, o.PlaneID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlaneSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlaneSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"planes\".* FROM \"planes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, planePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlaneSlice")
	}

	*o = slice

	return nil
}

// PlaneExists checks if the Plane row exists.
func PlaneExists(ctx context.Context, exec boil.ContextExecutor, planeID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"planes\" where \"plane_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, planeID)
	}
	row := exec.QueryRowContext(ctx, sql, planeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if planes exists")
	}

	return exists, nil
}

// Exists checks if the Plane row exists.
func (o *Plane) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlaneExists(ctx, exec, o.PlaneID)
}
