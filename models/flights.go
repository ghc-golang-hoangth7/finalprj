// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Flight is an object representing the database table.
type Flight struct {
	FlightID             string      `boil:"flight_id" json:"flight_id" toml:"flight_id" yaml:"flight_id"`
	PlaneNumber          null.String `boil:"plane_number" json:"plane_number,omitempty" toml:"plane_number" yaml:"plane_number,omitempty"`
	DeparturePoint       string      `boil:"departure_point" json:"departure_point" toml:"departure_point" yaml:"departure_point"`
	DestinationPoint     string      `boil:"destination_point" json:"destination_point" toml:"destination_point" yaml:"destination_point"`
	DepartureTime        time.Time   `boil:"departure_time" json:"departure_time" toml:"departure_time" yaml:"departure_time"`
	EstimatedArrivalTime time.Time   `boil:"estimated_arrival_time" json:"estimated_arrival_time" toml:"estimated_arrival_time" yaml:"estimated_arrival_time"`
	AvailableSeats       int         `boil:"available_seats" json:"available_seats" toml:"available_seats" yaml:"available_seats"`
	RealDepartureTime    null.Time   `boil:"real_departure_time" json:"real_departure_time,omitempty" toml:"real_departure_time" yaml:"real_departure_time,omitempty"`
	RealArrivalTime      null.Time   `boil:"real_arrival_time" json:"real_arrival_time,omitempty" toml:"real_arrival_time" yaml:"real_arrival_time,omitempty"`
	Status               string      `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *flightR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L flightL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FlightColumns = struct {
	FlightID             string
	PlaneNumber          string
	DeparturePoint       string
	DestinationPoint     string
	DepartureTime        string
	EstimatedArrivalTime string
	AvailableSeats       string
	RealDepartureTime    string
	RealArrivalTime      string
	Status               string
}{
	FlightID:             "flight_id",
	PlaneNumber:          "plane_number",
	DeparturePoint:       "departure_point",
	DestinationPoint:     "destination_point",
	DepartureTime:        "departure_time",
	EstimatedArrivalTime: "estimated_arrival_time",
	AvailableSeats:       "available_seats",
	RealDepartureTime:    "real_departure_time",
	RealArrivalTime:      "real_arrival_time",
	Status:               "status",
}

var FlightTableColumns = struct {
	FlightID             string
	PlaneNumber          string
	DeparturePoint       string
	DestinationPoint     string
	DepartureTime        string
	EstimatedArrivalTime string
	AvailableSeats       string
	RealDepartureTime    string
	RealArrivalTime      string
	Status               string
}{
	FlightID:             "flights.flight_id",
	PlaneNumber:          "flights.plane_number",
	DeparturePoint:       "flights.departure_point",
	DestinationPoint:     "flights.destination_point",
	DepartureTime:        "flights.departure_time",
	EstimatedArrivalTime: "flights.estimated_arrival_time",
	AvailableSeats:       "flights.available_seats",
	RealDepartureTime:    "flights.real_departure_time",
	RealArrivalTime:      "flights.real_arrival_time",
	Status:               "flights.status",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var FlightWhere = struct {
	FlightID             whereHelperstring
	PlaneNumber          whereHelpernull_String
	DeparturePoint       whereHelperstring
	DestinationPoint     whereHelperstring
	DepartureTime        whereHelpertime_Time
	EstimatedArrivalTime whereHelpertime_Time
	AvailableSeats       whereHelperint
	RealDepartureTime    whereHelpernull_Time
	RealArrivalTime      whereHelpernull_Time
	Status               whereHelperstring
}{
	FlightID:             whereHelperstring{field: "\"flights\".\"flight_id\""},
	PlaneNumber:          whereHelpernull_String{field: "\"flights\".\"plane_number\""},
	DeparturePoint:       whereHelperstring{field: "\"flights\".\"departure_point\""},
	DestinationPoint:     whereHelperstring{field: "\"flights\".\"destination_point\""},
	DepartureTime:        whereHelpertime_Time{field: "\"flights\".\"departure_time\""},
	EstimatedArrivalTime: whereHelpertime_Time{field: "\"flights\".\"estimated_arrival_time\""},
	AvailableSeats:       whereHelperint{field: "\"flights\".\"available_seats\""},
	RealDepartureTime:    whereHelpernull_Time{field: "\"flights\".\"real_departure_time\""},
	RealArrivalTime:      whereHelpernull_Time{field: "\"flights\".\"real_arrival_time\""},
	Status:               whereHelperstring{field: "\"flights\".\"status\""},
}

// FlightRels is where relationship names are stored.
var FlightRels = struct {
	PlaneNumberPlane string
}{
	PlaneNumberPlane: "PlaneNumberPlane",
}

// flightR is where relationships are stored.
type flightR struct {
	PlaneNumberPlane *Plane `boil:"PlaneNumberPlane" json:"PlaneNumberPlane" toml:"PlaneNumberPlane" yaml:"PlaneNumberPlane"`
}

// NewStruct creates a new relationship struct
func (*flightR) NewStruct() *flightR {
	return &flightR{}
}

func (r *flightR) GetPlaneNumberPlane() *Plane {
	if r == nil {
		return nil
	}
	return r.PlaneNumberPlane
}

// flightL is where Load methods for each relationship are stored.
type flightL struct{}

var (
	flightAllColumns            = []string{"flight_id", "plane_number", "departure_point", "destination_point", "departure_time", "estimated_arrival_time", "available_seats", "real_departure_time", "real_arrival_time", "status"}
	flightColumnsWithoutDefault = []string{"flight_id", "departure_point", "destination_point", "departure_time", "estimated_arrival_time", "available_seats", "status"}
	flightColumnsWithDefault    = []string{"plane_number", "real_departure_time", "real_arrival_time"}
	flightPrimaryKeyColumns     = []string{"flight_id"}
	flightGeneratedColumns      = []string{}
)

type (
	// FlightSlice is an alias for a slice of pointers to Flight.
	// This should almost always be used instead of []Flight.
	FlightSlice []*Flight
	// FlightHook is the signature for custom Flight hook methods
	FlightHook func(context.Context, boil.ContextExecutor, *Flight) error

	flightQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	flightType                 = reflect.TypeOf(&Flight{})
	flightMapping              = queries.MakeStructMapping(flightType)
	flightPrimaryKeyMapping, _ = queries.BindMapping(flightType, flightMapping, flightPrimaryKeyColumns)
	flightInsertCacheMut       sync.RWMutex
	flightInsertCache          = make(map[string]insertCache)
	flightUpdateCacheMut       sync.RWMutex
	flightUpdateCache          = make(map[string]updateCache)
	flightUpsertCacheMut       sync.RWMutex
	flightUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var flightAfterSelectHooks []FlightHook

var flightBeforeInsertHooks []FlightHook
var flightAfterInsertHooks []FlightHook

var flightBeforeUpdateHooks []FlightHook
var flightAfterUpdateHooks []FlightHook

var flightBeforeDeleteHooks []FlightHook
var flightAfterDeleteHooks []FlightHook

var flightBeforeUpsertHooks []FlightHook
var flightAfterUpsertHooks []FlightHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Flight) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flightAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Flight) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flightBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Flight) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flightAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Flight) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flightBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Flight) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flightAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Flight) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flightBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Flight) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flightAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Flight) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flightBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Flight) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range flightAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFlightHook registers your hook function for all future operations.
func AddFlightHook(hookPoint boil.HookPoint, flightHook FlightHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		flightAfterSelectHooks = append(flightAfterSelectHooks, flightHook)
	case boil.BeforeInsertHook:
		flightBeforeInsertHooks = append(flightBeforeInsertHooks, flightHook)
	case boil.AfterInsertHook:
		flightAfterInsertHooks = append(flightAfterInsertHooks, flightHook)
	case boil.BeforeUpdateHook:
		flightBeforeUpdateHooks = append(flightBeforeUpdateHooks, flightHook)
	case boil.AfterUpdateHook:
		flightAfterUpdateHooks = append(flightAfterUpdateHooks, flightHook)
	case boil.BeforeDeleteHook:
		flightBeforeDeleteHooks = append(flightBeforeDeleteHooks, flightHook)
	case boil.AfterDeleteHook:
		flightAfterDeleteHooks = append(flightAfterDeleteHooks, flightHook)
	case boil.BeforeUpsertHook:
		flightBeforeUpsertHooks = append(flightBeforeUpsertHooks, flightHook)
	case boil.AfterUpsertHook:
		flightAfterUpsertHooks = append(flightAfterUpsertHooks, flightHook)
	}
}

// One returns a single flight record from the query.
func (q flightQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Flight, error) {
	o := &Flight{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for flights")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Flight records from the query.
func (q flightQuery) All(ctx context.Context, exec boil.ContextExecutor) (FlightSlice, error) {
	var o []*Flight

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Flight slice")
	}

	if len(flightAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Flight records in the query.
func (q flightQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count flights rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q flightQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if flights exists")
	}

	return count > 0, nil
}

// PlaneNumberPlane pointed to by the foreign key.
func (o *Flight) PlaneNumberPlane(mods ...qm.QueryMod) planeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"plane_number\" = ?", o.PlaneNumber),
	}

	queryMods = append(queryMods, mods...)

	return Planes(queryMods...)
}

// LoadPlaneNumberPlane allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (flightL) LoadPlaneNumberPlane(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFlight interface{}, mods queries.Applicator) error {
	var slice []*Flight
	var object *Flight

	if singular {
		var ok bool
		object, ok = maybeFlight.(*Flight)
		if !ok {
			object = new(Flight)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFlight)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFlight))
			}
		}
	} else {
		s, ok := maybeFlight.(*[]*Flight)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFlight)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFlight))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &flightR{}
		}
		if !queries.IsNil(object.PlaneNumber) {
			args = append(args, object.PlaneNumber)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &flightR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PlaneNumber) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PlaneNumber) {
				args = append(args, obj.PlaneNumber)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`planes`),
		qm.WhereIn(`planes.plane_number in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Plane")
	}

	var resultSlice []*Plane
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Plane")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for planes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for planes")
	}

	if len(planeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlaneNumberPlane = foreign
		if foreign.R == nil {
			foreign.R = &planeR{}
		}
		foreign.R.PlaneNumberFlights = append(foreign.R.PlaneNumberFlights, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlaneNumber, foreign.PlaneNumber) {
				local.R.PlaneNumberPlane = foreign
				if foreign.R == nil {
					foreign.R = &planeR{}
				}
				foreign.R.PlaneNumberFlights = append(foreign.R.PlaneNumberFlights, local)
				break
			}
		}
	}

	return nil
}

// SetPlaneNumberPlane of the flight to the related item.
// Sets o.R.PlaneNumberPlane to related.
// Adds o to related.R.PlaneNumberFlights.
func (o *Flight) SetPlaneNumberPlane(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Plane) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"flights\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"plane_number"}),
		strmangle.WhereClause("\"", "\"", 2, flightPrimaryKeyColumns),
	)
	values := []interface{}{related.PlaneNumber, o.FlightID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlaneNumber, related.PlaneNumber)
	if o.R == nil {
		o.R = &flightR{
			PlaneNumberPlane: related,
		}
	} else {
		o.R.PlaneNumberPlane = related
	}

	if related.R == nil {
		related.R = &planeR{
			PlaneNumberFlights: FlightSlice{o},
		}
	} else {
		related.R.PlaneNumberFlights = append(related.R.PlaneNumberFlights, o)
	}

	return nil
}

// RemovePlaneNumberPlane relationship.
// Sets o.R.PlaneNumberPlane to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Flight) RemovePlaneNumberPlane(ctx context.Context, exec boil.ContextExecutor, related *Plane) error {
	var err error

	queries.SetScanner(&o.PlaneNumber, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("plane_number")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PlaneNumberPlane = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PlaneNumberFlights {
		if queries.Equal(o.PlaneNumber, ri.PlaneNumber) {
			continue
		}

		ln := len(related.R.PlaneNumberFlights)
		if ln > 1 && i < ln-1 {
			related.R.PlaneNumberFlights[i] = related.R.PlaneNumberFlights[ln-1]
		}
		related.R.PlaneNumberFlights = related.R.PlaneNumberFlights[:ln-1]
		break
	}
	return nil
}

// Flights retrieves all the records using an executor.
func Flights(mods ...qm.QueryMod) flightQuery {
	mods = append(mods, qm.From("\"flights\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"flights\".*"})
	}

	return flightQuery{q}
}

// FindFlight retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFlight(ctx context.Context, exec boil.ContextExecutor, flightID string, selectCols ...string) (*Flight, error) {
	flightObj := &Flight{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"flights\" where \"flight_id\"=$1", sel,
	)

	q := queries.Raw(query, flightID)

	err := q.Bind(ctx, exec, flightObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from flights")
	}

	if err = flightObj.doAfterSelectHooks(ctx, exec); err != nil {
		return flightObj, err
	}

	return flightObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Flight) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no flights provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(flightColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	flightInsertCacheMut.RLock()
	cache, cached := flightInsertCache[key]
	flightInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			flightAllColumns,
			flightColumnsWithDefault,
			flightColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(flightType, flightMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(flightType, flightMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"flights\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"flights\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into flights")
	}

	if !cached {
		flightInsertCacheMut.Lock()
		flightInsertCache[key] = cache
		flightInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Flight.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Flight) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	flightUpdateCacheMut.RLock()
	cache, cached := flightUpdateCache[key]
	flightUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			flightAllColumns,
			flightPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update flights, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"flights\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, flightPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(flightType, flightMapping, append(wl, flightPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update flights row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for flights")
	}

	if !cached {
		flightUpdateCacheMut.Lock()
		flightUpdateCache[key] = cache
		flightUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q flightQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for flights")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for flights")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FlightSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"flights\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, flightPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in flight slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all flight")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Flight) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no flights provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(flightColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	flightUpsertCacheMut.RLock()
	cache, cached := flightUpsertCache[key]
	flightUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			flightAllColumns,
			flightColumnsWithDefault,
			flightColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			flightAllColumns,
			flightPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert flights, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(flightPrimaryKeyColumns))
			copy(conflict, flightPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"flights\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(flightType, flightMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(flightType, flightMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert flights")
	}

	if !cached {
		flightUpsertCacheMut.Lock()
		flightUpsertCache[key] = cache
		flightUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Flight record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Flight) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Flight provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), flightPrimaryKeyMapping)
	sql := "DELETE FROM \"flights\" WHERE \"flight_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from flights")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for flights")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q flightQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no flightQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from flights")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for flights")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FlightSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(flightBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"flights\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, flightPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from flight slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for flights")
	}

	if len(flightAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Flight) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFlight(ctx, exec, o.FlightID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FlightSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FlightSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"flights\".* FROM \"flights\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, flightPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FlightSlice")
	}

	*o = slice

	return nil
}

// FlightExists checks if the Flight row exists.
func FlightExists(ctx context.Context, exec boil.ContextExecutor, flightID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"flights\" where \"flight_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, flightID)
	}
	row := exec.QueryRowContext(ctx, sql, flightID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if flights exists")
	}

	return exists, nil
}

// Exists checks if the Flight row exists.
func (o *Flight) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FlightExists(ctx, exec, o.FlightID)
}
