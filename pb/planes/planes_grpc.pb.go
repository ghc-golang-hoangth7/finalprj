// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.4
// source: proto/planes.proto

package planes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlanesService_ListPlanes_FullMethodName        = "/planes.PlanesService/ListPlanes"
	PlanesService_AddOrUpdatePlane_FullMethodName  = "/planes.PlanesService/AddOrUpdatePlane"
	PlanesService_UpdatePlaneStatus_FullMethodName = "/planes.PlanesService/UpdatePlaneStatus"
)

// PlanesServiceClient is the client API for PlanesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanesServiceClient interface {
	ListPlanes(ctx context.Context, in *Plane, opts ...grpc.CallOption) (*PlaneList, error)
	AddOrUpdatePlane(ctx context.Context, in *Plane, opts ...grpc.CallOption) (*Plane, error)
	UpdatePlaneStatus(ctx context.Context, in *Plane, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type planesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanesServiceClient(cc grpc.ClientConnInterface) PlanesServiceClient {
	return &planesServiceClient{cc}
}

func (c *planesServiceClient) ListPlanes(ctx context.Context, in *Plane, opts ...grpc.CallOption) (*PlaneList, error) {
	out := new(PlaneList)
	err := c.cc.Invoke(ctx, PlanesService_ListPlanes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planesServiceClient) AddOrUpdatePlane(ctx context.Context, in *Plane, opts ...grpc.CallOption) (*Plane, error) {
	out := new(Plane)
	err := c.cc.Invoke(ctx, PlanesService_AddOrUpdatePlane_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planesServiceClient) UpdatePlaneStatus(ctx context.Context, in *Plane, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PlanesService_UpdatePlaneStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanesServiceServer is the server API for PlanesService service.
// All implementations must embed UnimplementedPlanesServiceServer
// for forward compatibility
type PlanesServiceServer interface {
	ListPlanes(context.Context, *Plane) (*PlaneList, error)
	AddOrUpdatePlane(context.Context, *Plane) (*Plane, error)
	UpdatePlaneStatus(context.Context, *Plane) (*emptypb.Empty, error)
	mustEmbedUnimplementedPlanesServiceServer()
}

// UnimplementedPlanesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlanesServiceServer struct {
}

func (UnimplementedPlanesServiceServer) ListPlanes(context.Context, *Plane) (*PlaneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlanes not implemented")
}
func (UnimplementedPlanesServiceServer) AddOrUpdatePlane(context.Context, *Plane) (*Plane, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdatePlane not implemented")
}
func (UnimplementedPlanesServiceServer) UpdatePlaneStatus(context.Context, *Plane) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlaneStatus not implemented")
}
func (UnimplementedPlanesServiceServer) mustEmbedUnimplementedPlanesServiceServer() {}

// UnsafePlanesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanesServiceServer will
// result in compilation errors.
type UnsafePlanesServiceServer interface {
	mustEmbedUnimplementedPlanesServiceServer()
}

func RegisterPlanesServiceServer(s grpc.ServiceRegistrar, srv PlanesServiceServer) {
	s.RegisterService(&PlanesService_ServiceDesc, srv)
}

func _PlanesService_ListPlanes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plane)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanesServiceServer).ListPlanes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanesService_ListPlanes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanesServiceServer).ListPlanes(ctx, req.(*Plane))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanesService_AddOrUpdatePlane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plane)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanesServiceServer).AddOrUpdatePlane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanesService_AddOrUpdatePlane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanesServiceServer).AddOrUpdatePlane(ctx, req.(*Plane))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanesService_UpdatePlaneStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plane)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanesServiceServer).UpdatePlaneStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanesService_UpdatePlaneStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanesServiceServer).UpdatePlaneStatus(ctx, req.(*Plane))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanesService_ServiceDesc is the grpc.ServiceDesc for PlanesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "planes.PlanesService",
	HandlerType: (*PlanesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPlanes",
			Handler:    _PlanesService_ListPlanes_Handler,
		},
		{
			MethodName: "AddOrUpdatePlane",
			Handler:    _PlanesService_AddOrUpdatePlane_Handler,
		},
		{
			MethodName: "UpdatePlaneStatus",
			Handler:    _PlanesService_UpdatePlaneStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/planes.proto",
}
