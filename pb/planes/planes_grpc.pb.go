// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.4
// source: proto/planes.proto

package planes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlanesService_UpsertPlane_FullMethodName       = "/planes.PlanesService/UpsertPlane"
	PlanesService_GetPlanesList_FullMethodName     = "/planes.PlanesService/GetPlanesList"
	PlanesService_GetPlaneById_FullMethodName      = "/planes.PlanesService/GetPlaneById"
	PlanesService_GetPlaneByNumber_FullMethodName  = "/planes.PlanesService/GetPlaneByNumber"
	PlanesService_ChangePlaneStatus_FullMethodName = "/planes.PlanesService/ChangePlaneStatus"
)

// PlanesServiceClient is the client API for PlanesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanesServiceClient interface {
	UpsertPlane(ctx context.Context, in *Plane, opts ...grpc.CallOption) (*PlaneId, error)
	GetPlanesList(ctx context.Context, in *PlaneQuery, opts ...grpc.CallOption) (*PlaneList, error)
	GetPlaneById(ctx context.Context, in *PlaneId, opts ...grpc.CallOption) (*Plane, error)
	GetPlaneByNumber(ctx context.Context, in *PlaneNumber, opts ...grpc.CallOption) (*Plane, error)
	ChangePlaneStatus(ctx context.Context, in *PlaneStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type planesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanesServiceClient(cc grpc.ClientConnInterface) PlanesServiceClient {
	return &planesServiceClient{cc}
}

func (c *planesServiceClient) UpsertPlane(ctx context.Context, in *Plane, opts ...grpc.CallOption) (*PlaneId, error) {
	out := new(PlaneId)
	err := c.cc.Invoke(ctx, PlanesService_UpsertPlane_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planesServiceClient) GetPlanesList(ctx context.Context, in *PlaneQuery, opts ...grpc.CallOption) (*PlaneList, error) {
	out := new(PlaneList)
	err := c.cc.Invoke(ctx, PlanesService_GetPlanesList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planesServiceClient) GetPlaneById(ctx context.Context, in *PlaneId, opts ...grpc.CallOption) (*Plane, error) {
	out := new(Plane)
	err := c.cc.Invoke(ctx, PlanesService_GetPlaneById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planesServiceClient) GetPlaneByNumber(ctx context.Context, in *PlaneNumber, opts ...grpc.CallOption) (*Plane, error) {
	out := new(Plane)
	err := c.cc.Invoke(ctx, PlanesService_GetPlaneByNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planesServiceClient) ChangePlaneStatus(ctx context.Context, in *PlaneStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PlanesService_ChangePlaneStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanesServiceServer is the server API for PlanesService service.
// All implementations must embed UnimplementedPlanesServiceServer
// for forward compatibility
type PlanesServiceServer interface {
	UpsertPlane(context.Context, *Plane) (*PlaneId, error)
	GetPlanesList(context.Context, *PlaneQuery) (*PlaneList, error)
	GetPlaneById(context.Context, *PlaneId) (*Plane, error)
	GetPlaneByNumber(context.Context, *PlaneNumber) (*Plane, error)
	ChangePlaneStatus(context.Context, *PlaneStatusRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPlanesServiceServer()
}

// UnimplementedPlanesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlanesServiceServer struct {
}

func (UnimplementedPlanesServiceServer) UpsertPlane(context.Context, *Plane) (*PlaneId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertPlane not implemented")
}
func (UnimplementedPlanesServiceServer) GetPlanesList(context.Context, *PlaneQuery) (*PlaneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanesList not implemented")
}
func (UnimplementedPlanesServiceServer) GetPlaneById(context.Context, *PlaneId) (*Plane, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaneById not implemented")
}
func (UnimplementedPlanesServiceServer) GetPlaneByNumber(context.Context, *PlaneNumber) (*Plane, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaneByNumber not implemented")
}
func (UnimplementedPlanesServiceServer) ChangePlaneStatus(context.Context, *PlaneStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePlaneStatus not implemented")
}
func (UnimplementedPlanesServiceServer) mustEmbedUnimplementedPlanesServiceServer() {}

// UnsafePlanesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanesServiceServer will
// result in compilation errors.
type UnsafePlanesServiceServer interface {
	mustEmbedUnimplementedPlanesServiceServer()
}

func RegisterPlanesServiceServer(s grpc.ServiceRegistrar, srv PlanesServiceServer) {
	s.RegisterService(&PlanesService_ServiceDesc, srv)
}

func _PlanesService_UpsertPlane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plane)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanesServiceServer).UpsertPlane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanesService_UpsertPlane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanesServiceServer).UpsertPlane(ctx, req.(*Plane))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanesService_GetPlanesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaneQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanesServiceServer).GetPlanesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanesService_GetPlanesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanesServiceServer).GetPlanesList(ctx, req.(*PlaneQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanesService_GetPlaneById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaneId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanesServiceServer).GetPlaneById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanesService_GetPlaneById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanesServiceServer).GetPlaneById(ctx, req.(*PlaneId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanesService_GetPlaneByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaneNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanesServiceServer).GetPlaneByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanesService_GetPlaneByNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanesServiceServer).GetPlaneByNumber(ctx, req.(*PlaneNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanesService_ChangePlaneStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaneStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanesServiceServer).ChangePlaneStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanesService_ChangePlaneStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanesServiceServer).ChangePlaneStatus(ctx, req.(*PlaneStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanesService_ServiceDesc is the grpc.ServiceDesc for PlanesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "planes.PlanesService",
	HandlerType: (*PlanesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertPlane",
			Handler:    _PlanesService_UpsertPlane_Handler,
		},
		{
			MethodName: "GetPlanesList",
			Handler:    _PlanesService_GetPlanesList_Handler,
		},
		{
			MethodName: "GetPlaneById",
			Handler:    _PlanesService_GetPlaneById_Handler,
		},
		{
			MethodName: "GetPlaneByNumber",
			Handler:    _PlanesService_GetPlaneByNumber_Handler,
		},
		{
			MethodName: "ChangePlaneStatus",
			Handler:    _PlanesService_ChangePlaneStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/planes.proto",
}
